aspnet:AllowInsecureDeserialization.*true
# Dotnet cookies
# Cookie manipulation can be key to various application security exploits, such as session hijacking/fixation and parameter
# manipulation.
System.Net.Cookie
HTTPOnly
document.cookie
# Dotnet crypto
RNGCryptoServiceProvider
SHA
MD5
base64
xor
(\.DES|TripleDES| DES)
RC2
System.Random
Random
System.Security.Cryptography
PBEParameterSpec
PasswordDeriveBytes
# Dotnet errors
catch[[:space:]]*{
Finally
trace enabled
customErrors mode
<trace[[:space:]]+enabled[[:space:]]*=['"][Tt][Rr][Uu][Ee]['"]
System\.Diagnostics\.Process\.Start\(.*
new[[:space:]]+(System\.Diagnostic\.)?Process(StartInfo)?[[:space:]]*\(.*
\.Start[[:space:]]\(.*
# via CliWrap
new[[:space:]]+Cli[[:space:]]*\(.*
# via Microsoft.VisualBasic
\.Shell[[:space:]]*\(.*
\.Invoke[[:space:]]*\([^\)]+\)
<%=[[:space:]]*[Rr]equest\.[Qq]uery[Ss]tring\[.*%>
#[Ss][Ee][Ll][Ee][Cc][Tt][[:space:]]+.*\{[0-9]+\}
[Ss][Ee][Ll][Ee][Cc][Tt][[:space:]]+.*[\'\"][[:space:]]*\+[[:space:]]*[Rr]equest\..*
(WHERE|where)[[:space:]]+.*=.*[\'\"][[:space:]]*\+[[:space:]]*[Rr]equest\..*
[\'\" ]+AND[[:space:]]+.*=.*\+[[:space:]]*[Rr]equest\..*
(LIKE|like)[[:space:]]+[^\;]+\+[[:space:]]*[Rr]equest\..*
(ORDER[[:space:]]+BY|order[[:space:]]+by)[[:space:]]+.*\+[[:space:]]*[Rr]equest
(LIMIT|limit)[[:space:]]+([0-9]+,[[:space:]]*[Rr]equest\..*|[Rr]request\..*)
Process.Start[[:space:]]*\(.*\+
\.Arguments[[:space:]]*=([^;\)]*[\'\"][[:space:]]*\+[[:space:]]*[^\'\"]+|[^;\)]*[^\'\"]+[[:space:]]*\+[[:space:]]*[\'\"])
\.SelectNodes[[:space:]]*\(.*[\'\"][[:space:]]*\+[[:space:]]*[^\'\"]+
ReadAllBytes[[:space:]]*\(.*[Rr]equest
# DotNet input controls
system.web.ui.htmlcontrols.htmlinputhidden
system.web.ui.webcontrols.hiddenfield
system.web.ui.webcontrols.hyperlink
system.web.ui.webcontrols.textbox
system.web.ui.webcontrols.label
system.web.ui.webcontrols.linkbutton
system.web.ui.webcontrols.listbox
system.web.ui.webcontrols.checkboxlist
system.web.ui.webcontrols.dropdownlistValidateLifetime[[:space:]]*=[[:space:]]*false
# Dotnet legacy
printf
strcpy
# Dotnet Logging
# Logging can be a source of information leakage.
log4net
Console.WriteLine
System.Diagnostics.Debug
System.Diagnostics.Trace
# Dotnet memory allocation and deallocation
# MemoryStream Class: https://msdn.microsoft.com/en-us/library/system.io.memorystream(v=vs.110).aspx
MemoryStream
.Write
.Read
.WriteByte
.WriteTo
.WriteAsync
.Flush
.Finalize
.CopyTo
# Dotnet permission
# Bypassing the code access security permission?
.RequestMinimum
.RequestOptional
Assert
Debug.Assert
CodeAccessPermission
ReflectionPermission.MemberAccess
SecurityPermission.ControlAppDomain
SecurityPermission.UnmanagedCode
SecurityPermission.SkipVerification
SecurityPermission.ControlEvidence
SecurityPermission.SerializationFormatter
SecurityPermission.ControlPrincipal
SecurityPermission.ControlDomainPolicy
SecurityPermission.ControlPolicy
[Rr]edirect[[:space:]]*\(,*\,[[:space:]]*[Ff][Aa][Ll][Ss][Ee][[:space:]]*\)
# Dotnet reflection
# Reflection (C sharp): https://msdn.microsoft.com/en-us/library/mt656691.aspx
Reflection
# Dotnet HTTP request strings
# Requests from external sources. Ensure that all HTTP requests received are data validated for
# composition, max and min length, and if the data falls with the realms of the
parameter white-list.
request.accepttypes
request.browser
request.files
request.headers
request.httpmethod
request.item
request.querystring
request.form
request.cookies
request.certificate
request.rawurl
request.servervariables
request.url
request.urlreferrer
request.useragent
request.userlanguages
request.IsSecureConnection
request.TotalBytes
request.BinaryRead
InputStream
HiddenField.Value
TextBox.Text
recordSet
Server.Transfer
# Dotnet serialization and deserialization
# Security and Serialization: https://msdn.microsoft.com/en-us/library/ek7af9ck(v=vs.90).aspx
Serialization
SerializationFormatter
Serializable
SerializeObject
SerializationBinder
JsonSerializer
JsonSerializerSettings
DeserializeObject
ISerializable
# DotNet SQL
exec[[:space:]]*sp_executesql
execute[[:space:]]*sp_executesql
exec[[:space:]]*sp_.*
execute[[:space:]]*sp_.*
exec[[:space:]]*xp_.*
execute[[:space:]]*sp_.*
exec[[:space:]]*@
execute[[:space:]]*@
executestatement[[:space:]]*\(
executeSQL[[:space:]]*\(
\.ExecuteSqlRaw[[:space:]]*\(
#setfilter
executeQuery[[:space:]]*\(
GetQueryResultInXML[[:space:]]*\(
#adodb
#sqloledb
#sql[[:space:]]*server
#driver
Server\.CreateObject
#\.Provider
\.Open([[:space:]]*\(|[[:space:]]+[\"\']).*
#ADODB.recordset
New[[:space:]]+OleDbConnection
ExecuteReader[[:space:]]*\(
#DataSource
SqlCo(mmand|nnection).*\=
#Microsoft.Jet
#SqlDataReader
#ExecuteReader
#GetString
#SqlDataAdapter
#CommandType
StoredProcedure[[:space:]]*\(
#System\.Data\.sql
[Cc]onnection[Ss]tr(ing)?[[:space:]]*\=[[:space:]]*[\'\"].*
# Stricter matching to avoid javascript spam
[\'\"][Ss][Ee][Ll][Ee][Cc][Tt][[:space:]]+.*(\{[0-9]+\}|[\'\"][[:space:]]+\+)
(WHERE|where)[[:space:]]+[^\;]+=.*(\{[0-9]+\}|[\'\"][[:space:]]+\+)
[\'\" ]+AND[[:space:]]+.*=.*(\{[0-9]+\}|[\'\"][[:space:]]+\+)
(LIKE|like)[[:space:]]+[^\(\)\;]+(\{[0-9]+\}|[\'\"][[:space:]]+\+)
(ORDER[[:space:]]+BY|order[[:space:]]+by)[[:space:]]+.*(\{[0-9]+\}|[\'\"][[:space:]]+\+)
(LIMIT|limit)[[:space:]]+.*(\{[0-9]+\}|[\'\"][[:space:]]+\+)
ServerCertificateValidationCallback.*[Tt][Rr][Uu][Ee]
checkCertificateName
checkCertificateRevocationList
# Dotnet XSS
[Rr]esponse.[Ww]rite[[:space:]]*\(
<%[[:space:]]*=[[:space:]]*[\_a-zA-Z0-9][^\%]+
innerText[[:space:]]*=[^\;]+\+
innerHTML[[:space:]]*=[^\;]+\+
[Vv]alidate[Rr]equest=[\'\"]?false[\'\"]?
